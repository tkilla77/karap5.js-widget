{"version":3,"file":"main.js","mappings":"MAOmCA,MAOCA,MAUpC,MAAMC,EACJ,aAAOC,CAAOC,EAAGC,GACf,OAAO,IAAIH,EAAYE,EAAGC,EAC5B,CAEA,eAAOC,CAASC,GACd,OAAO,IAAIL,EAAYK,EAAOH,EAAGG,EAAOF,EAC1C,CAEA,WAAAG,CAAYJ,EAAGC,GACbI,KAAKL,EAAIA,EACTK,KAAKJ,EAAIA,CACX,CAEA,GAAAK,CAAIH,GACF,OAAOL,EAAYC,OAAOM,KAAKL,EAAIG,EAAOH,EAAGK,KAAKJ,EAAIE,EAAOF,EAC/D,CAEA,IAAAM,CAAKC,GACH,OAAOA,EAAUC,MAAMJ,KACzB,CAEA,QAAAK,GACE,MAAO,IAAIL,KAAKL,MAAMK,KAAKJ,IAC7B,EAIF,MAAMU,EACJ,WAAAP,CAAYQ,EAAMZ,EAAGC,EAAGY,GACtBR,KAAKO,KAAOA,EACZP,KAAKF,OAASL,EAAYC,OAAOC,EAAGC,GACpCI,KAAKQ,MAAQA,CACf,CACA,KAAAJ,CAAMN,GACJ,OAAOA,EAAOG,IAAID,KAAKF,OACzB,CACA,QAAAO,GACE,OAAOL,KAAKO,IACd,GAGF,WACE,IAAIE,EAAK,IAAIH,EAAU,IAAK,GAAI,EAAG,GAC/BI,EAAO,IAAIJ,EAAU,IAAK,EAAG,EAAGK,KAAKC,IACrCC,EAAQ,IAAIP,EAAU,IAAK,EAAG,EAAGK,KAAKC,GAAK,GAC3CE,EAAO,IAAIR,EAAU,KAAM,EAAG,GAAIK,KAAKC,GAAK,GAChDH,EAAGK,KAAOA,EACVL,EAAGI,MAAQA,EACXC,EAAKA,KAAOJ,EACZI,EAAKD,MAAQJ,EACbC,EAAKI,KAAOD,EACZH,EAAKG,MAAQC,EACbD,EAAMC,KAAOL,EACbI,EAAMA,MAAQH,EACPK,OAAOC,OAAO,CACnBC,GAAIR,EACJS,KAAMR,EACNS,MAAON,EACPO,KAAMN,GAEV,CAGmBO,GAEnB,MAAMC,EACJ,iBAAOC,CAAWC,GAChB,OAAQA,GACN,IAAK,IACL,IAAK,IACH,OAAOC,EAAMC,MACf,IAAK,IACL,IAAK,KACH,OAAOD,EAAME,KACf,IAAK,IACL,IAAK,KACH,OAAOF,EAAMG,IACf,IAAK,IACL,IAAK,KACH,OAAOH,EAAMI,SACf,IAAK,IACL,IAAK,KACH,OAAOJ,EAAMK,OACf,QACE,OAAO,IAAIR,EAAKE,EAAMA,GAE5B,CACA,WAAAzB,CAAYgC,EAAU,IAAKC,EAAON,OAChC1B,KAAK+B,QAAUA,EACf/B,KAAKgC,KAAOA,CACd,CAEA,IAAAC,CAAKtC,EAAGC,GACNsC,KAAKlC,KAAK+B,QAASpC,EAAGC,EACxB,CAEA,QAAAS,GACE,OAAOL,KAAKgC,IACd,EAIF,MAAMP,EAAQV,OAAOC,OAAO,CAC1BU,MAAO,IAAIJ,EAAK,IAAK,KACrBK,KAAM,IAAIL,EAAK,KAAM,KACrBM,IAAK,IAAIN,EAAK,KAAM,KACpBO,SAAU,IAAIP,EAAK,KAAM,KACzBQ,OAAQ,IAAIR,EAAK,KAAM,M","sources":["webpack://karap5.js-widget/./lib/kara.js"],"sourcesContent":["\nfunction assert(condition, error = \"Error\") {\n  if (!condition) {\n    throw new Error(error);\n  }\n}\n\nclass InvalidMoveException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nclass TooManyMovesException extends Error {\n  constructor(message) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nconst GRID_SIZE = [8, 8];\n\n/** 2D grid cell coordinates. */\nclass Coordinates {\n  static fromXy(x, y) {\n    return new Coordinates(x, y);\n  }\n\n  static fromCopy(coords) {\n    return new Coordinates(coords.x, coords.y);\n  }\n\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  add(coords) {\n    return Coordinates.fromXy(this.x + coords.x, this.y + coords.y);\n  }\n\n  move(direction) {\n    return direction.apply(this);\n  }\n\n  toString() {\n    return `[${this.x}, ${this.y}]`;\n  }\n}\n\n/** A 2D grid direction. */\nclass Direction {\n  constructor(name, x, y, angle) {\n    this.name = name;\n    this.coords = Coordinates.fromXy(x, y);\n    this.angle = angle;\n  }\n  apply(coords) {\n    return coords.add(this.coords);\n  }\n  toString() {\n    return this.name;\n  }\n}\n\nfunction createDirections() {\n  let up = new Direction(\"‚Üë\", 0, -1, 0);\n  let down = new Direction(\"‚Üì\", 0, 1, Math.PI);\n  let right = new Direction(\"‚Üí\", 1, 0, Math.PI / 2);\n  let left = new Direction(\"‚Üê\", -1, 0, -Math.PI / 2);\n  up.left = left;\n  up.right = right;\n  left.left = down;\n  left.right = up;\n  down.left = right;\n  down.right = left;\n  right.left = up;\n  right.right = down;\n  return Object.freeze({\n    UP: up,\n    DOWN: down,\n    RIGHT: right,\n    LEFT: left,\n  })\n}\n\n/** All known directions. */\nconst Directions = createDirections();\n\nclass Cell {\n  static fromString(spec) {\n    switch (spec) {\n      case \" \":\n      case \"_\":\n        return Cells.EMPTY;\n      case \"T\":\n      case \"üå≥\":\n        return Cells.TREE;\n      case \"B\":\n      case \"üêû\":\n        return Cells.BUG;\n      case \"M\":\n      case \"üçÑ\":\n        return Cells.MUSHROOM;\n      case \"C\":\n      case \"üçÄ\":\n        return Cells.CLOVER;\n      default:\n        return new Cell(spec, spec);\n    }\n  }\n  constructor(display = \"?\", type = EMPTY) {\n    this.display = display;\n    this.type = type;\n  }\n\n  draw(x, y) {\n    text(this.display, x, y);\n  }\n\n  toString() {\n    return this.type;\n  }\n}\n\n/** Enumeration of all Cell types. */\nconst Cells = Object.freeze({\n  EMPTY: new Cell(\" \", \"_\"),\n  TREE: new Cell(\"üå≥\", \"T\"),\n  BUG: new Cell(\"üêû\", \"B\"),\n  MUSHROOM: new Cell(\"üçÑ\", \"M\"),\n  CLOVER: new Cell(\"üçÄ\", \"C\"),\n});\n\nconst EMPTY_GRID_SPEC =\n  `TTTTTTTTT\n   T       T\n   T       T\n   T       T\n   T       T\n   T       T\n   T       T\n   T       T\n   TTTTTTTTT`;\n\n/** A 2d Kara-like game grid. */\nclass Grid {\n  /** Creates a new grid from another one, copying all state. */\n  static copy(grid) {\n    return Grid.fromStringSpec(grid.toString());\n  }\n\n  /** Creates a new grid from a single, multi-line text spec.\n      Lines are trimmed, so they must start and end with a non-whitespace\n      cell (or '_'). */\n  static fromStringSpec(spec) {\n    let lines = spec.split(/\\r?\\n/g);\n    for (let i = 0; i < lines.length; i++) {\n      lines[i] = lines[i].trim();\n    }\n    return Grid.fromStringArray(lines);\n  }\n\n  /** Creates a new grid from a list of lines, top to bottom.\n      Each line must have the same number of characters as the first.\n      Lines are not trimmed. */\n  static fromStringArray(lines) {\n    // Use iterator based string decomposition to handle all code points.\n    let width = [...lines[0]].length;\n    let height = lines.length;\n    let grid = new Grid([width, height]);\n    let y = 0\n    for (let line of lines) {\n      assert([...line].length == width, `Unexpected grid spec, line ${y} has length ${[...line].length}, expected ${width} `);\n      let x = 0;\n      for (let cellspec of line) {\n        let cell = Cell.fromString(cellspec);\n        let coords = Coordinates.fromXy(x, y);\n        //console.log(`inserting ${cell} for ${cellspec} at ${coords}`);\n        grid.set(coords, cell);\n        x++;\n      }\n      y++;\n    }\n    return grid;\n  }\n\n  constructor(size = GRID_SIZE) {\n    assert(size[0] >= 1 && size[1] >= 1, `unexpected grid size: ${size}`);\n    this.size = [...size]; // defensive clone\n    let line = Array(this.size[0]).fill(Cells.EMPTY);\n    this.grid = Array(this.size[1]);\n    for (let y = 0; y < this.grid.length; y++) {\n      this.grid[y] = Array.from(line);\n    }\n  }\n\n  /** Finds the first Kara-cell and returns a corresponding Kara. Removes all\n    * Kara-like cells. If no Kara-cell exists, the first empty cell is used for\n    * Kara, with a direction of RIGHT. If no empty cells exist, undefined is\n    * returned. */\n  findKara() {\n    let kara = undefined;\n    let firstEmpty = undefined;\n    for (let y = 0; y < this.grid.length; y++) {\n      let line = this.grid[y];\n      for (let x = 0; x < line.length; x++) {\n        let coords = Coordinates.fromXy(x, y);\n        let cell = this.at(coords);\n        if (cell == Cells.EMPTY && !firstEmpty) {\n          firstEmpty = coords;\n        }\n        if (!kara) {\n          switch (cell.type) {\n            case '<':\n              kara = new Kara(this, coords, Directions.LEFT);\n              break;\n            case '^':\n              kara = new Kara(this, coords, Directions.UP);\n              break;\n            case '>':\n              kara = new Kara(this, coords, Directions.RIGHT);\n              break;\n            case 'V':\n            case 'v':\n              kara = new Kara(this, coords, Directions.DOWN);\n              break;\n          }\n        }\n        switch (cell.type) {\n          case '<':\n          case '^':\n          case '>':\n          case 'V':\n          case 'v':\n            this.clear(coords);\n        }\n      }\n    }\n    if (!kara && firstEmpty) {\n      // Default to the first empty cell.\n      kara = new Kara(this, firstEmpty, Direction.RIGHT);\n    }\n    return kara;\n  }\n\n  /** Returns the cell at the given coordinates. */\n  at(coords) {\n    return this.grid[coords.y][coords.x];\n  }\n\n  /** Sets the cell at the given coordinates. */\n  set(coords, cell) {\n    this.grid[coords.y][coords.x] = cell;\n  }\n\n  /** Clears the cell at the given coordinates. */\n  clear(coords) {\n    this.grid[coords.y][coords.x] = Cells.EMPTY;\n  }\n\n  /** Draws the grid using processing primitives, from the given \n      upper-left corner and using the given cell size, both in pixels. */\n  draw(cell_size = 25) {\n    push();\n    stroke('rgba(115,115,115,0.5)');\n    textAlign(CENTER, CENTER);\n\n    for (let y = 0; y < this.grid.length; y++) {\n      let line = this.grid[y];\n      for (let x = 0; x < line.length; x++) {\n        let cell = this.at(Coordinates.fromXy(x, y));\n        push();\n        translate(x * cell_size, y * cell_size);\n        square(0, 0, cell_size);\n        // Processing coords grow from upper-left to lower-right.\n        // We use textAlign(CENTER, CENTER), so specify midpoint.\n        translate(0.5 * cell_size, 0.5 * cell_size);\n        cell.draw(0, 0);\n        pop();\n      }\n    }\n    pop();\n  }\n\n  gridSize() {\n    return Coordinates.fromXy(this.grid[0].length, this.grid.length);\n  }\n\n  toString() {\n    return this.grid.map(line => line.map(cell => cell.toString()).join(\"\")).join(\"\\n\");\n  }\n}\n\n\n/** The Kara lady beetle implementation on top of the grid. */\nclass Kara {\n  constructor(grid, coords = Coordinates.fromXy(1, 1), direction = Directions.RIGHT) {\n    this.grid = grid;\n    this.direction = direction;\n    this.coords = Coordinates.fromCopy(coords);\n  }\n  draw(cell_size) {\n    push();\n    translate((this.coords.x + 0.5) * cell_size, (this.coords.y + 0.5) * cell_size);\n    rotate(this.direction.angle);\n    textAlign(CENTER, CENTER);\n    text(Cells.BUG.display, 0, 0);\n    pop();\n  }\n  _cell(coords) {\n    try {\n      return this.grid.at(coords);\n    } catch (Exception) {\n      // ignore illegal direction\n      return undefined;\n    }\n  }\n  treeFront() {\n    return this._cell(this.direction.apply(this.coords)) == Cells.TREE;\n  }\n  treeLeft() {\n    return this._cell(this.direction.left.apply(this.coords)) == Cells.TREE;\n  }\n  treeRight() {\n    return this._cell(this.direction.right.apply(this.coords)) == Cells.TREE;\n  }\n  mushroomFront() {\n    return this._cell(this.direction.apply(this.coords)) == Cells.MUSHROOM;\n  }\n  onLeaf() {\n    return this._cell(this.coords) == Cells.CLOVER;\n  }\n  _isMoveableDestination(destination) {\n    let cell = this._cell(destination);\n    //console.log(`Cell at ${destination} is ${cell}`);\n    return cell != undefined && cell != Cells.TREE;\n  }\n  _canMove(direction = undefined) {\n    if (!direction) {\n      direction = this.direction;\n    }\n    return this._isMoveableDestination(this.coords.move(direction));\n  }\n  move() {\n    if (this._canMove()) {\n      this.coords = this.coords.move(this.direction);\n    } else {\n      throw new InvalidMoveException(`Unable to move from ${this.coords} in direction ${this.direction}!`);\n    }\n  }\n  turnLeft() {\n    this.direction = this.direction.left;\n  }\n  turnRight() {\n    this.direction = this.direction.right;\n  }\n  putLeaf() {\n    // shall we check for MUSHROOM or replace it?\n    this.grid.set(this.coords, Cells.CLOVER);\n  }\n  removeLeaf() {\n    if (this.grid.at(this.coords) == Cells.CLOVER) {\n      this.grid.clear(this.coords);\n    }\n  }\n}\n\n\n/** A Kara decorator that delays actions (but not sensors) in order to\n    allow for stepping replay. */\nclass KaraStepper {\n  constructor(kara, delay_ms = 500) {\n    this.kara = kara;\n    this.delay = delay_ms;\n  }\n\n  sleeper() {\n    return new Promise(resolve => setTimeout(() => resolve(), this.delay));\n  }\n\n  treeFront() {\n    return this.kara.treeFront();\n  }\n  treeLeft() {\n    return this.kara.treeLeft();\n  }\n  treeRight() {\n    return this.kara.treeRight();\n  }\n  mushroomFront() {\n    return this.kara.mushroomFront();\n  }\n  onLeaf() {\n    return this.kara.onLeaf();\n  }\n  async move() {\n    await this.sleeper();\n    this.kara.move();\n  }\n  async turnLeft() {\n    await this.sleeper();\n    this.kara.turnLeft();\n  }\n  async turnRight() {\n    await this.sleeper();\n    this.kara.turnRight();\n  }\n  async putLeaf() {\n    await this.sleeper();\n    this.kara.putLeaf();\n  }\n  async removeLeaf() {\n    await this.sleeper();\n    this.kara.removeLeaf();\n  }\n}\n\n/** A Kara decorator that records actions (but not sensor requests) in\n    addition to executing them, for later replay, for example using an\n    async KaraStepper. */\nclass KaraRecorder {\n  constructor(target, maxCommands = 50) {\n    this.kara = target;\n    this.commands = Array();\n    this.maxCommands = maxCommands;\n  }\n  async replay(target) {\n    for (let command of this.commands) {\n      await target[command]();\n    }\n  }\n  record(command) {\n    // console.log(`recording ${command}`);\n    if (this.commands.length > this.maxCommands) {\n      throw new TooManyMovesException(`Stopped recording after ${this.maxCommands} commands.`);\n    }\n    this.commands.push(command);\n  }\n\n  treeFront() {\n    return this.kara.treeFront();\n  }\n  treeLeft() {\n    return this.kara.treeLeft();\n  }\n  treeRight() {\n    return this.kara.treeRight();\n  }\n  mushroomFront() {\n    return this.kara.mushroomFront();\n  }\n  onLeaf() {\n    return this.kara.onLeaf();\n  }\n  move() {\n    this.record(this.move.name);\n    this.kara.move();\n  }\n  turnLeft() {\n    this.record(this.turnLeft.name);\n    this.kara.turnLeft();\n  }\n  turnRight() {\n    this.record(this.turnRight.name);\n    this.kara.turnRight();\n  }\n  putLeaf() {\n    this.record(this.putLeaf.name);\n    this.kara.putLeaf();\n  }\n  removeLeaf() {\n    this.record(this.removeLeaf.name);\n    this.kara.removeLeaf();\n  }\n}\n\n/** A Kara world including a game grid and one Kara beetle. */\nclass KaraWorld {\n  /** Creates a new game from a string spec and sets up a processing setup and\n    * draw function.\n    * \n    * String-specs are processed line-by-line, and each character specifies the \n    * following cell contents:\n    * <ul>\n    *  <li><code>T</code>: Tree (üå≥)\n    *  <li><code>M</code>: Mushroom (üçÑ)\n    *  <li><code>C</code>: Clover leaf (üçÄ)\n    *  <li><code>&nbsp;</code> or <code>_</code>: Empty cell\n    *  <li><code><^>v</code>: Kara (üêû) start position and direction.\n    * </ul>\n    * \n    * <h3>Example</h3>\n    * <code>\nKaraWorld.create(\n    `TTTTTTTTT\n     T       T\n     T  C    T\n     T >   T T\n     T       T\n     M       T\n     T    T  T\n     T       T\n     TTTTTTTTT`)    \n    * </code>\n    *\n    * Lines are trimmed before processing, so they must start and end with\n    * a non-whitespace character (e.g. 'T' or '_').\n    * \n    * @param {string} [gridspec=EMPTY_GRID_SPEC] the world specification (see   \n    *                 above)\n    * @param {number} [cell_size=25] the size of one cell square in pixels\n    * @param {boolean} [install=true] true to install processing\n    *                  <code>setup</code> and <code>draw</code> functions and a\n    *                  global <code>kara</code> variable.\n    * @param {boolean} [keyhandler=true] true to install a manual movement key \n    *                  handler for the arrow keys.\n    * @returns {KaraWorld} the created KaraWorld instance\n    */\n  static create(gridspec = EMPTY_GRID_SPEC,\n    cell_size = 25,\n    install = true,\n    keyhandler = true) {\n    let game = KaraWorld.fromStringSpec(gridspec);\n    if (install) {\n      let size = game.grid.gridSize();\n      window.setup = () => {\n        createCanvas(size.x * cell_size, size.y * cell_size);\n        game.executeKara();\n      };\n      window.draw = () => {\n        game.draw(cell_size);\n      };\n      // Set up a global variable for kara for the case that the client\n      // function misses the parameter.\n      window.kara = game.getRecorder();\n    }\n    if (keyhandler) {\n      window.keyPressed = () => {\n        return game.keyPressed();\n      };\n    }\n    return game;\n  }\n\n  /** Creates a new game from a grid spec. Note that it is not possible to \n    * create a game where Kara's initial square also contains a non-empty cell \n    * (leaf or mushroom) using a string spec. */\n  static fromStringSpec(gridspec = EMPTY_GRID_SPEC) {\n    let grid = Grid.fromStringSpec(gridspec);\n    return new KaraWorld(grid, grid.findKara());\n  }\n\n  constructor(grid, kara) {\n    this.grid = grid;\n    this.kara = kara;\n    let gridCopy = Grid.copy(this.grid);\n    let karaCopy = Object.create(this.kara);\n    karaCopy.grid = gridCopy;\n    this.recorder = new KaraRecorder(karaCopy);\n  }\n\n  /** Draw the grid at (0,0). Use processing transformations to move or\n    * rotate the grid. */\n  draw(cell_size) {\n    push();\n    textSize(cell_size * 0.8);\n    this.grid.draw(cell_size);\n    this.kara.draw(cell_size);\n    pop();\n  }\n\n  /** Returns a Kara instance connected to a 'shadow copy' of the game.\n    * Kara commands are executed on the shadow copy can be replayed\n    * on a different Kara instance by calling\n    * <code>recorder.replay(kara)</code>. This is useful to enable\n    * delayed stepping execution of an async Kara implementation such\n    * as <code>KaraStepper</code>. */\n  getRecorder() {\n    return this.recorder;\n  }\n\n  /** Executes the well-known client-side 'my_kara(Kara)' function and \n    * records its actions, then replays in async, delayed mode using\n    * KaraStepper.\n    * <p>This function assumes a deterministic world where each set of\n    * commands executed in the same order results in the same outcome. */\n  async executeKara(delay_ms = 500, client_function = 'my_kara', maxCommands = 50) {\n    this.recorder.maxCommands = maxCommands;\n    let exception = undefined;\n    try {\n      if (typeof client_function == 'string') {\n        client_function = window[client_function];\n      }\n      if (typeof client_function == 'function') {\n         // call well-known function in client-code\n         client_function(this.recorder);\n      } else {\n        console.log(`Not a valid client function: ${client_function}`)\n      }\n    } catch (e) {\n      // Record exception for rethrowing.\n      if (e instanceof InvalidMoveException || e instanceof TooManyMovesException) {\n        exception = e;\n      }\n    }\n    let stepper = new KaraStepper(this.kara, delay_ms);\n    return this.recorder.replay(stepper)\n      .catch((e) => {\n        if (e instanceof InvalidMoveException || e instanceof TooManyMovesException) {\n          throw exception;\n        }\n      });\n  }\n\n  /** A key-handler for manual Kara movement. */\n  keyPressed() {\n    if (keyCode == UP_ARROW) {\n      if (event) event.preventDefault();\n      this.kara.move();\n      return false;\n    } else if (keyCode == LEFT_ARROW) {\n      if (event) event.preventDefault();\n      this.kara.turnLeft();\n      return false;\n    } else if (keyCode == RIGHT_ARROW) {\n      if (event) event.preventDefault();\n      this.kara.turnRight();\n      return false;\n    } else if (keyCode == DOWN_ARROW) {\n      if (event) event.preventDefault();\n      if (this.kara.onLeaf()) {\n        this.kara.removeLeaf();\n      } else {\n        this.kara.putLeaf();\n      }\n      return false;\n    }\n  }\n}\n\n"],"names":["Error","Coordinates","fromXy","x","y","fromCopy","coords","constructor","this","add","move","direction","apply","toString","Direction","name","angle","up","down","Math","PI","right","left","Object","freeze","UP","DOWN","RIGHT","LEFT","createDirections","Cell","fromString","spec","Cells","EMPTY","TREE","BUG","MUSHROOM","CLOVER","display","type","draw","text"],"sourceRoot":""}